.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_working_with_catalog_forecasts.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_tutorials_working_with_catalog_forecasts.py:


Working with catalog-based forecasts
====================================

This example shows some basic interactions with data-based forecasts. We will load in a forecast stored in the CSEP
data format, and compute the expected rates on a 0.1° x 0.1° grid covering the state of California. We will plot the
expected rates in the spatial cells.

Overview:
    1. Define forecast properties (time horizon, spatial region, etc).
    2. Compute the expected rates in space and magnitude bins
    3. Plot expected rates in the spatial cells

Load required libraries
-----------------------

Most of the core functionality can be imported from the top-level :mod:`csep` package. Utilities are available from the
:mod:`csep.utils` subpackage.


.. code-block:: default


    import numpy

    import csep
    from csep.core import regions
    from csep.utils import datasets








Load data forecast
---------------------

PyCSEP contains some basic forecasts that can be used to test of the functionality of the package. This forecast has already 
been filtered to the California RELM region.


.. code-block:: default


    forecast = csep.load_catalog_forecast(datasets.ucerf3_ascii_format_landers_fname)








Define spatial and magnitude regions
------------------------------------

Before we can compute the bin-wise rates we need to define a spatial region and a set of magnitude bin edges. The magnitude
bin edges # are the lower bound (inclusive) except for the last bin, which is treated as extending to infinity. We can
bind these # to the forecast object. This can also be done by passing them as keyword arguments
into :func:`csep.load_catalog_forecast`.


.. code-block:: default


    # Magnitude bins properties
    min_mw = 4.95
    max_mw = 8.95
    dmw = 0.1

    # Create space and magnitude regions
    magnitudes = regions.magnitude_bins(min_mw, max_mw, dmw)
    region = regions.california_relm_region()

    # Bind region information to the forecast (this will be used for binning of the catalogs)
    forecast.region = regions.create_space_magnitude_region(region, magnitudes)








Compute spatial event counts
----------------------------

The :class:`csep.core.forecasts.CatalogForecast` provides a method to compute the expected number of events in spatial cells. This 
requires a region with magnitude information. 


.. code-block:: default


    _ = forecast.get_expected_rates(verbose=True)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Processed 1 catalogs in 0.0020294189453125 seconds
    Processed 2 catalogs in 0.003751039505004883 seconds
    Processed 3 catalogs in 0.0051763057708740234 seconds
    Processed 4 catalogs in 0.006404399871826172 seconds
    Processed 5 catalogs in 0.007559061050415039 seconds
    Processed 6 catalogs in 0.00884556770324707 seconds
    Processed 7 catalogs in 0.009992122650146484 seconds
    Processed 8 catalogs in 0.011291742324829102 seconds
    Processed 9 catalogs in 0.013529777526855469 seconds
    Processed 10 catalogs in 0.014839649200439453 seconds
    Processed 20 catalogs in 0.026930570602416992 seconds
    Processed 30 catalogs in 0.040201663970947266 seconds
    Processed 40 catalogs in 0.05323362350463867 seconds
    Processed 50 catalogs in 0.06697916984558105 seconds
    Processed 60 catalogs in 0.07957720756530762 seconds
    Processed 70 catalogs in 0.09212470054626465 seconds
    Processed 80 catalogs in 0.10512423515319824 seconds
    Processed 90 catalogs in 0.11847138404846191 seconds
    Processed 100 catalogs in 0.13097047805786133 seconds
    Processed 200 catalogs in 0.25524473190307617 seconds
    Processed 300 catalogs in 0.38633108139038086 seconds
    Processed 400 catalogs in 0.5163657665252686 seconds
    Processed 500 catalogs in 0.6946508884429932 seconds
    Processed 600 catalogs in 0.8226840496063232 seconds
    Processed 700 catalogs in 0.9510471820831299 seconds
    Processed 800 catalogs in 1.1342403888702393 seconds
    Processed 900 catalogs in 1.2603724002838135 seconds
    Processed 1000 catalogs in 1.3882381916046143 seconds
    Processed 2000 catalogs in 2.909266710281372 seconds
    Processed 3000 catalogs in 4.353806257247925 seconds
    Processed 4000 catalogs in 5.840545415878296 seconds
    Processed 5000 catalogs in 7.299868583679199 seconds
    Processed 6000 catalogs in 8.763743877410889 seconds
    Processed 7000 catalogs in 10.265750646591187 seconds
    Processed 8000 catalogs in 11.666957139968872 seconds
    Processed 9000 catalogs in 13.21532940864563 seconds
    Processed 10000 catalogs in 14.65674614906311 seconds




Plot expected event counts
--------------------------

We can plot the expected event counts the same way that we plot a :class:`csep.core.forecasts.GriddedForecast`


.. code-block:: default


    ax = forecast.expected_rates.plot(plot_args={'clim': [-3.5, 0]})




.. image:: /tutorials/images/sphx_glr_working_with_catalog_forecasts_001.png
    :alt: ucerf3-landers
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.7.9/x64/lib/python3.7/site-packages/cartopy/mpl/gridliner.py:343: UserWarning: The .ylabels_right attribute is deprecated. Please use .right_labels to toggle visibility instead.
      warnings.warn('The .ylabels_right attribute is deprecated. Please '




The images holes in the image are due to under-sampling from the forecast.

Quick sanity check
------------------

The forecasts were filtered to the spatial region so all events should be binned. We loop through each data in the forecast and
count the number of events and compare that with the expected rates. The expected rate is an average in each space-magnitude bin, so
we have to multiply this value by the number of catalogs in the forecast.


.. code-block:: default


    total_events = 0
    for catalog in forecast:
        total_events += catalog.event_count
    numpy.testing.assert_allclose(total_events, forecast.expected_rates.sum() * forecast.n_cat)








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  22.650 seconds)


.. _sphx_glr_download_tutorials_working_with_catalog_forecasts.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: working_with_catalog_forecasts.py <working_with_catalog_forecasts.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: working_with_catalog_forecasts.ipynb <working_with_catalog_forecasts.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
